match (n) return head(labels(n)) as label, count(*) as count;


match (n:User) 
with n order by n.upvotes desc limit 10 
where n.upvotes < 1000
return n, n.name, n.upvotes;


match (n:User) 
where n.upvotes < 1000 and n.downvotes = 6
with n order by n.upvotes desc limit 10 
return n, n.name, n.upvotes, n.downvotes;	


MATCH (n:Badge)
Where n.BadgeClass = 'gold'
and n.tagBased = true
RETURN n LIMIT 25;


MATCH (u:User)
where u.reputation > 1000
with u order by u.reputation desc


match (b:Badge {tagbased : true, BadgeClass :'gold'})<-[]-(u:User) return b, u


bin\neo4j-admin.bat import --nodes:BBnode=BBnode.csv 
return u limit 20;


bin\neo4j-admin.bat import --database badges3 --ignore-empty-strings true --nodes[:Badges]=import\BBnode.csv


bin\neo4j-admin.bat import --database importposts --ignore-empty-strings true --nodes=Post=import\Posts.csv
bin\neo4j-admin.bat import --database importbadges --ignore-empty-strings true --nodes=Badge=import\Badges.csv
bin\neo4j-admin.bat import --database importanswers --ignore-empty-strings true --nodes=Answer=import\PostsAnswers.csv
bin\neo4j-admin.bat import --database importusers --ignore-empty-strings true  --nodes=User=import\Users.csv


bin\neo4j-admin.bat import --database gamingdb3 --ignore-empty-strings true --nodes=User=import\Users.csv --nodes=Post=import\Posts.csv --nodes=Badge=import\Badges.csv --nodes=Tag=import\Tags.csv --nodes=Answer=import\PostsAnswers.csv --relationships=HAS_BADGE=import/rel_user_badge.csv --relationships=TAGGED_WITH=import/rel_posts_tags.csv


:use system 
CREATE DATABASE gamingdb4




create index on :Post(PostType);
create index on :Post(score); 
create index on :Post(ViewCount);
create index on :Post(AnswerCount);
create index on :Post(AcceptedAnswerId); 

create index on :Tag(Tag);

create index on :Badge(BadgeClass);
create index on :Badge(tagbased); 
create index on :Badge(Name); 

create index on :Answer(Score); 
create index on :Answer(PostType);

create index on :User(reputation);
create index on :User(upvotes);
create index on :User(userid); 
create index on :User(Name)